AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling Group with Load Balancer and Launch Template

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the existing EC2 Key Pair for SSH access.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the VPC where resources will be created.
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of Subnet IDs for the Auto Scaling Group.

Resources:

  MyLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-0f34c5ae932e6f0e4 ##Amazonlinux AMI 64 bit
        InstanceType: t2.micro
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Use this for your user data (script from top to bottom)
            # install httpd (Linux 2 version)
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
        KeyName: !Ref KeyName
        Monitoring:
          Enabled: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: MyInstance
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: '8'
              VolumeType: gp2
        NetworkInterfaces:
            - DeviceIndex: 0
              AssociatePublicIpAddress: true
              Groups: 
                - !Ref MyASGSecurityGroup

 
  MyLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Load Balancer Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  MyASGSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Load Balancer Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref MyLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  MyLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: MyLoadBalancer
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref MyLoadBalancerSecurityGroup
      Type: application

 
  MyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VpcId
  MyHttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  MyAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: MyAutoScalingGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 6
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref MyTargetGroup
      VPCZoneIdentifier: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: MyAutoScalingGroup
          PropagateAtLaunch: 'true'

  ScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
  

  CPUMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 300  # 5 minutes (in seconds)
      Statistic: Sum
      Threshold: 20.0
      AlarmDescription: Alarm that triggers when CPU utilization is greater than 30% within 5 minutes
      AlarmActions:
        - !Ref ScalingPolicy
      

  
